  Executes brick and/or project tests.

  poly test [ARGS]

  The brick tests are executed from all projects they belong to except for the development
  project (if not :dev is passed in):

  ARGS              Tests to execute
  ----------------  -------------------------------------------------------------
  (empty)           All brick tests that are directly or indirectly changed.

  :project          All brick tests that are directly or indirectly changed +
                    tests for changed projects.

  :all-bricks       All brick tests.

  :all              All brick tests + all project tests (except development).


  To execute the brick tests from the development project, also pass in :dev:

  ARGS              Tests to execute
  ----------------  -------------------------------------------------------------
  :dev              All brick tests that are directly or indirectly changed,
                    executed from all projects (development included).

  :project :dev     All brick tests that are directly or indirectly changed,
                    executed from all projects (development included) +
                    tests for changed projects (development included).

  :all-bricks :dev  All brick tests, executed from all projects
                    (development included).

  :all :dev         All brick tests, executed from all projects
                    (development included) + all project tests
                    (development included).

  Projects can also be explicitly selected with e.g. project:proj1 or
  project:proj1:proj2.

  We can also specify which bricks to include, by listing them like this:
  brick:mycomponent:another-component:mybase

  Example:
    poly test
    poly test :project
    poly test :all-bricks
    poly test :all
    poly test project:proj1
    poly test project:proj1:proj2
    poly test brick:mycomponent
    poly test brick:mycomponent:mybase
    poly test :dev
    poly test :project :dev
    poly test :all-bricks :dev
    poly test :all :dev

  The poly tool's default test runner will discover clojure.test tests from the "/test"
  directories of bricks and projects, and execute them using clojure.test/run-tests.

  Alternative test runners can also be used by referring to their constructors
  in workspace.edn:

  {;; To use it as the default test runner for the workspace
   :test {:create-test-runner my.test-runner/create}

   :projects
   {
    ;; To only use it for specific projects
    "foo" {:test {:create-test-runner my.test-runner/create}}

    ;; To revert to poly's built-in default test runner only for specific projects
    "bar" {:test {:create-test-runner :default}}

    ;; To use multiple test runners invoked the specified order
    "baz" {:test {:create-test-runner [my.linter/create :default my.extra/create]}}
    }
   }

  This requires that my.test-runner/create is available on the classpath of the
  poly tool, which is easiest to achieve by running poly as a dependency.

  The docstring of polylith.clj.core.test-runner-contract.interface/TestRunner
  contains details on how to implement a custom test runner and a constructor.

  The poly tool's default test runner is also implemented this way and can be referred to
  as an example; see polylith.clj.core.clojure-test-test-runner.interface/create.

  Refer to the Polylith documentation for more information about custom test runners.
