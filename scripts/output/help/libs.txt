  Shows all libraries that are used in the workspace.

  poly libs [:compact] [:outdated] [:update] [libraries:LIBS] [out:FILENAME]

    :compact  = Shows the table in a more compact way.

    :outdated = Shows the latest version of each library, or blank if up to date.

    :update   = Updates all libraries to the latest version. If LIBS is given,
                then only update selected libraries.
                Old library versions can be kept by giving the library as a symbol in
                :keep-lib-versions for bricks and projects in workspace.edn.

    FILENAME  = The name of the text file to create, containing the
                output from this command.
                                                                                 u  u
                                                                                 s  t
                                                                                 e  i
    library                 version    type      KB   cl   dev  default  admin   r  l
    -----------------------------------------------   --   -------------------   ----
    antlr/antlr             2.7.7      maven    434   x     x      -       -     .  x
    clj-time                0.15.2     maven     23   x     x      -       -     x  .
    org.clojure/clojure     1.10.1     maven  3,816   x     x      -       -     .  .
    org.clojure/tools.deps  0.16.1264  maven     46   x     x      -       -     .  .

  In this example we have four libraries used by the cl and dev projects.
  If any of the libraries are added to the default or admin profiles, they will appear
  as an x in these columns. Remember that src and test sources live together in a
  profile, which is fine because they are only used from the development project.

  The x for the cl and dev columns says that the library is part of the src scope.
  If a library is only used from the test scope, then it's marked with a 't'.
  A library used in the test scope, can either be specified directly by the project
  itself via :aliases > :test > :extra-deps or indirectly via included bricks in
  :deps > :local/root which will be picked up and used by the 'test' command.

  The x in the user column, tells that clj-time is used by that component
  by having it specified in its 'deps.edn' file as a src dependency.
  If a dependency is only used from the test scope, then it will turn up as a t.

  Libraries can also be selected per project and it's therefore possible to have
  different versions of the same library in different projects (if needed).
  Use the :override-deps key in the project's 'deps.edn' file to explicitly set
  a version for one or several libraries in a project.

  The 'type' column says in what way the dependency is included, e.g.:
   - maven: clj-time/clj-time {:mvn/version "0.15.2"}
   - local: clj-time {:local/root "/local-libs/clj-time-0.15.2.jar"}
   - git:   clj-time/clj-time {:git/url "https://github.com/clj-time/clj-time.git"
                               :sha     "d9ed4e46c6b42271af69daa1d07a6da2df455fab"}

  The KB column shows the size in kilobytes, which is the size of the jar
  file for Maven and Local dependencies, and the size of all files in the
  ~/.gitlibs/libs/YOUR-LIBRARY directory for Git dependencies.

  Example:
    poly libs
    poly libs :compact
    poly libs :outdated
    poly libs :update
    poly libs :update libraries:metosin/malli:zprint/zprint
    poly libs out:libs.txt
    poly doc page:libraries
