  Shows workspace information.

  poly info [:loc] [out:FILENAME]

    :loc     = Shows the number of lines of code for each brick and project.

    FILENAME = The name of the text file to create, containing the output from
               this command.

  All the arguments used by the 'test' command can also be used as a way to see
  what tests will be executed.

    stable since: dec73ec | stable-lisa

    projects: 2   interfaces: 3
    bases:    1   components: 4

    active profiles: default

    project       alias  status   dev  admin
    ---------------------------   ----------
    command-line  cl      ---     ---   --
    development   dev     s--     s--   --

    interface  brick    cl    dev  admin
    -----------------   ---   ----------
    payer      payer    s--   st-   --
    user       admin    s--   ---   s-
    user       user *   ---   st-   --
    util       util     s--   st-   --
    -          cli      s--   st-   --

  This example shows a sample workspace. Let's go through each section:

  1. stable since: dec73ec | stable-lisa

     Shows the most recent commit marked as stable, or the last release if 
     since:release or since:previous-release was given, or the first commit
     in the repository if no tag was found, followed by the tag (if found).
     More information can be found in the 'diff' command help.

  2. projects: 2   interfaces: 3
     bases:    1   components: 4

     Shows how many projects, bases, components and interfaces there are
     in the workspace.

  3. active profiles: default

     Shows the names of active profiles. The profile paths are merged into the
     development project. A profiles is an alias in ./deps.edn that starts
     with a +. If no profile is selected, the default profile is automatically
     selected.

     Profiles are activated by passing them in by name (prefixed with '+'), e.g.:
       poly info +admin +onemore

     To deactivate all the profiles, and stop 'default' from being merged into
     the development project, type:
       poly info +

  4. project       alias  status   dev  admin
     ---------------------------   ----------
     command-line  cl      ---     ---   --
     development   dev     s--     s--   --

    This table lists all projects. The 'project' column shows the name
    of the projects, which are the directory names under the 'projects',
    directory except for 'development' that stores its code under the
    'development' directory. If any file within the project directory has
    changed, then it will be marked with a *. If that's not the case, but
    any of the included bricks are changed, then it will be marked with a +.

    The 'deps.edn' config files are stored under each project, except for
    the development project that stores it at the workspace root.

    Aliases are configured in :projects in ./workspace.edn.

    The 'status' column has three flags with different meaning:
      s--  The project has a 'src' directory, e.g.
           'projects/command-line/src'.
      -t-  The project has a 'test' directory, e.g.
           'projects/command-line/test'.
      --x  The project tests (its own) are marked for execution.

    To show the 'resources' directory, also pass in :r or :resources, e.g.
    'poly info :resources':
      s---  The project has a 'src' directory, e.g.
            'projects/command-line/src'.
      -r--  The project has a 'resources' directory, e.g.
            'projects/command-line/resources'.
      --t-  The project has a 'test' directory, e.g.
            'projects/command-line/test'
      ---x  The project tests (its own) are marked for execution.

    The dev column has three flags with different meaning:
      s--  The project's 'src' directory, e.g.
           'development/src' is added to './deps.edn'
      -t-  The project's 'test' directory, e.g.
           'development/test' is added to './deps.edn'
      --x  The project tests are marked for execution from development.

    The last admin column, is a profile:
      s-  The profile contains a path to the 'src' directory, e.g.
          'projects/command-line/src'.
      -t  The profile contains a path to the 'test' directory, e.g.
          'projects/command-line/test'.

    If also passing in :r or :resources, e.g. 'poly info :resources':
      s--  The profile contains a path to the 'src' directory, e.g.
           'projects/command-line/src'.
      -r-  The profile contains a path to the 'resources' directory, e.g.
           'projects/command-line/resources'.
      --t  The profile contains a path to the 'test' directory, e.g.
           'projects/command-line/test'.

  5. interface  brick    cl    dev  admin
     -----------------   ---   ----------
     payer      payer    s--   st-   --
     user       admin    s--   ---   st
     user       user *   ---   st-   --
     util       util     s--   st-   --
     -          cli      s--   st-   --

    This table lists all bricks and in which projects and profiles they are
    added to.

    The 'interface' column shows what interface the component has. The name
    is the first namespace after the top namespace, e.g.:
    com.my.company.user.interface

    The 'brick' column shows the name of the brick, in green if a component or
    blue if a base. Each component lives in a directory under the 'components'
    directory and each base lives under the 'bases' directory. If any file for
    a brick has changed since the last stable point in time, it will be marked
    with an asterisk, * (user in this example).

    The changed files can be listed by executing 'poly diff'.

    The next cl column is the command-line project that lives under the
    'projects' directory. Each line in this column says whether a brick is
    included in the project or not.
    The flags mean:
      s--  The project contains a path to the 'src' directory, e.g.
           'components/user/src' (or is indirectly added by a :local/root).
      -t-  The project contains a path to the 'test' directory, e.g.
           'components/user/test' (or is indirectly added by a :local/root).
      --x  The brick is marked to be executed from this project.

    If :r or :resources is also passed in:
      s---  The project contains a path to the 'src' directory, e.g. 
            'components/user/src' (or is indirectly added by a :local/root).
      -r--  The project contains a path to the 'resources' directory, e.g.
            'components/user/resources' (or is indirectly added by a :local/root).
      --t-  The project contains a path to the 'test' directory, e.g.
            'components/user/test' (or is indirectly added by a :local/root).
      ---x  The brick is marked to be executed from this project.

    The next group of columns, dev admin, is the development project with
    its profiles. If passing in a plus with 'poly info +' then it will also show
    the default profile. The flags for the dev project works the same
    as for cl.

    The flags for the admin profile means:
      s-  The profile contains a path to the 'src' directory, e.g.
          'components/user/src'.
      -t  The profile contains a path to the 'test' directory, e.g.
          'components/user/test'

  It's not enough that a path has been added to a project to show an 'x',
  the file or directory must also exist.

  If any warnings or errors were found in the workspace, they will be listed at
  the end, see the 'check' command help, for a complete list of validations.

  Example:
    poly info
    poly info :loc
    poly info since:release
    poly info since:previous-release
    poly info project:myproject
    poly info project:myproject:another-project
    poly info brick:mycomponent
    poly info brick:mycomponent:mybase
    poly info color-mode:none
    poly info :project
    poly info :dev
    poly info :project :dev
    poly info :all
    poly info :all-bricks
    poly info out:info.txt
    poly info ws-dir:another-ws
    poly info ws-file:ws.edn
