version: 2.0

jobs:
  check:
    docker:
      - image: cimg/clojure:1.11.1
    working_directory: ~/polylith
    steps:
      - checkout
      - attach_workspace:
          at: ~/polylith
      - restore_cache:
          key: polylith-{{ checksum "deps.edn" }}
      - run:
          name: Create polylith config if it does not exist
          command: mkdir -p "${XDG_CONFIG_HOME:=${HOME}/.config}/polylith" && echo "{}" > "${XDG_CONFIG_HOME:=${HOME}/.config}/polylith/config.edn"
      - run:
          name: Check Polylith workspace
          command: clojure -M:poly check
      - save_cache:
          key: polylith-{{ checksum "deps.edn" }}
          paths:
            - ${XDG_CONFIG_HOME:=${HOME}/.config}/polylith
            - ~/.m2
            - ~/.lein
            - ~/polylith/.cpcache
      - persist_to_workspace:
          root: .
          paths:
            - .

  check-build:
    docker:
      - image: cimg/clojure:1.11.1
    working_directory: ~/polylith
    steps:
      - checkout
      - attach_workspace:
          at: ~/polylith
      - restore_cache:
          key: polylith-{{ checksum "deps.edn" }}
      - run:
          name: Create polylith config if it does not exist
          command: mkdir -p "${XDG_CONFIG_HOME:=${HOME}/.config}/polylith" && echo "{}" > "${XDG_CONFIG_HOME:=${HOME}/.config}/polylith/config.edn"
      - run:
          name: Check Polylith workspace
          command: clojure -M:poly check since:previous-release
      - save_cache:
          key: polylith-{{ checksum "deps.edn" }}
          paths:
            - ${XDG_CONFIG_HOME:=${HOME}/.config}/polylith
            - ~/.m2
            - ~/.lein
            - ~/polylith/.cpcache
      - persist_to_workspace:
          root: .
          paths:
            - .

  info:
    docker:
      - image: cimg/clojure:1.11.1
    working_directory: ~/polylith
    steps:
      - attach_workspace:
          at: ~/polylith
      - restore_cache:
          key: polylith-{{ checksum "deps.edn" }}
      - run:
          name: Add global git user email
          command: git config --global user.email "circleci@polyfy.com"
      - run:
          name: Add global git user name
          command: git config --global user.name "CircleCI"
      - run:
          name: Run ws command for Polylith workspace
          command: clojure -M:poly ws
      - run:
          name: Run info command for Polylith workspace
          command: clojure -M:poly info
      - run:
          name: Run deps command for Polylith workspace
          command: clojure -M:poly deps
      - run:
          name: Run libs command for Polylith workspace
          command: clojure -M:poly libs

  info-build:
    docker:
      - image: cimg/clojure:1.11.1
    working_directory: ~/polylith
    steps:
      - attach_workspace:
          at: ~/polylith
      - restore_cache:
          key: polylith-{{ checksum "deps.edn" }}
      - run:
          name: Add global git user email
          command: git config --global user.email "circleci@polyfy.com"
      - run:
          name: Add global git user name
          command: git config --global user.name "CircleCI"
      - run:
          name: Run ws command for Polylith workspace
          command: clojure -M:poly ws since:previous-release
      - run:
          name: Run info command for Polylith workspace
          command: clojure -M:poly info since:previous-release
      - run:
          name: Run deps command for Polylith workspace
          command: clojure -M:poly deps since:previous-release
      - run:
          name: Run libs command for Polylith workspace
          command: clojure -M:poly libs since:previous-release

  test:
    docker:
      - image: cimg/clojure:1.11.1
    working_directory: ~/polylith
    steps:
      - attach_workspace:
          at: ~/polylith
      - restore_cache:
          key: polylith-{{ checksum "deps.edn" }}
      - run:
          name: Add global git user email
          command: git config --global user.email "circleci@polyfy.com"
      - run:
          name: Add global git user name
          command: git config --global user.name "CircleCI"
      - run:
          name: Force clojure to resolve dependencies
          command: clojure -A:dev:test -P
      - run:
          name: Run tests for Polylith workspace
          command: clojure -M:poly test :project

  test-build:
    docker:
      - image: cimg/clojure:1.11.1
    working_directory: ~/polylith
    steps:
      - attach_workspace:
          at: ~/polylith
      - restore_cache:
          key: polylith-{{ checksum "deps.edn" }}
      - run:
          name: Add global git user email
          command: git config --global user.email "circleci@polyfy.com"
      - run:
          name: Add global git user name
          command: git config --global user.name "CircleCI"
      - run:
          name: Force clojure to resolve dependencies
          command: clojure -A:dev:test -P
      - run:
          name: Run tests for Polylith workspace
          command: clojure -M:poly test :project since:previous-release

  mark-as-stable:
    docker:
      - image: cimg/clojure:1.11.1
    working_directory: ~/polylith
    steps:
      - attach_workspace:
          at: ~/polylith
      - run:
          name: Add github.com to known hosts
          command: mkdir -p ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: Add global git user email
          command: git config --global user.email "circleci@polyfy.com"
      - run:
          name: Add global git user name
          command: git config --global user.name "CircleCI"
      - run:
          name: Add git tag to mark this stable point
          command: git tag -f -a "stable-$CIRCLE_BRANCH" -m "[skip ci] Added Stable Polylith tag"
      - run:
          name: Push the new tag
          command: git push origin $CIRCLE_BRANCH --tags --force

  deploy:
    docker:
      - image: cimg/clojure:1.11.1
    working_directory: ~/polylith
    steps:
      - attach_workspace:
          at: ~/polylith
      - restore_cache:
          key: polylith-{{ checksum "deps.edn" }}
      - run:
          name: Deploy changed projects to clojars
          command: clojure -T:build deploy

  create-artifacts:
    docker:
      - image: cimg/clojure:1.11.1
    working_directory: ~/polylith
    steps:
      - attach_workspace:
          at: ~/polylith
      - restore_cache:
          key: polylith-{{ checksum "deps.edn" }}
      - run:
          name: Create artifacts
          command: clojure -T:build create-artifacts
      - store_artifacts:
          path: ./artifacts
      - persist_to_workspace:
          root: .
          paths:
            - .

  publish-github-release:
    docker:
      - image: cibuilds/github:0.13
    working_directory: ~/polylith
    steps:
      - attach_workspace:
          at: ~/polylith
      - run:
          name: Publish release on GitHub
          command: |
            VERSION=${CIRCLE_TAG#?}
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -n "Version ${VERSION}" ${CIRCLE_TAG} ./artifacts

workflows:
  version: 2
  validate:
    jobs:
      - check
      - info:
          requires:
            - check
      - test:
          requires:
            - check
      - mark-as-stable:
          requires:
            - test
          filters:
            branches:
              only:
                - master
  deploy:
    jobs:
      - check-build:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - info-build:
          requires:
            - check-build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - test-build:
          requires:
            - check-build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - deploy:
          requires:
            - test-build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - create-artifacts:
          requires:
            - test-build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-github-release:
          requires:
            - create-artifacts
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
